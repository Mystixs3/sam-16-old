=== OVERVIEW ===

- 16 Bits
- Big endian
- 10 Registers (0-9)
- 64 KiB of memory
- Return addr, stack pointer and program counter are stored in their own register style thing

=== INSTRUCTIONS ===

Each instruction is 4 octets long, 1 opcode octet and 3 data octets.

	MNEMONIC		OPCODE	{       DATA        }
1  - NOP			0x00	0x00 	0x00	0x00	: No operation
2  - HLT			0x01	0x00	0x00	0x00	: Stop the clock

3  - LD REG REG		0x02	REG		REG		0x00	: Load the value of one register to another
4  - LD REG VALUE	0x03	REG 	{   VALUE   }	: Load a value into a register
5  - LD REG ADDR	0x04	REG		{MEM ADDR }		: Load the value from memory to a register
6  - LD ADDR REG	0x05	{ MEM ADDR }	REG 	: Load the value from a register in to memory

7 - ADD REG REG 	0x06	REG 	REG 	0x00	: Adds the contents of two registers, and loading the sum into the first register
8 - SUB REG REG 	0x07	REG 	REG 	0x00	: Subtracts the contents of two registers, and loading the sum into the first register
9 - MUL REG REG 	0x08	REG 	REG		0x00	: Multiplies the contents of two registers, and loading the product into the first register
10 - DIV REG REG 	0x09	REG 	REG 	0x00	: Divides the contents of two registers, and loading the quotient into the first register

11 - PUSH REG 		0x0A	REG 	0x00	0x00	: Pushes the value from a register onto the stack
12 - POP REG 		0x0B	REG 	0x00 	0x00	: Pops the top of the stack into a register

13 - JMP ADDR		0x0C	{ MEM ADDR }	0x00	: Sets the program counter to an address in memory, jumping there
14 - JMPL ADDR		0x0D	{ MEM ADDR }	0x00	: Sets the program counter to an address in memory, jumping there, as long as the less than bit is 1. 
15 - JMPE ADDR		0x0E	{ MEM ADDR }	0x00	: Sets the program counter to an address in memory, jumping there, as long as the equal bit is 1. 
16 - JMPG ADDR		0x0F	{ MEM ADDR }	0x00	: Sets the program counter to an address in memory, jumping there, as long as the greater than bit is 1. 
17 - RET 			0x10	0x00	0x00	0x00	: Returns to the address after the previous JMP instruction

18 - CMP REG REG 	0x11	REG 	REG 	0x00	: Compares two registers and sets the flag registers accordingly
19 - CLF			0x12	0x00	0x00	0x00	: Clears the flags register

20 - AND REG REG	0x13	REG		REG		0x00	: Performs a bitwise AND on two registers
21 - OR REG REG		0x14	REG		REG		0x00	: Performs a bitwise OR on two registers
22 - NOT REG		0x15	REG		REG		0x00	: Performs a bitwise NOT on a registers
23 - XOR REG REG 	0x16	REG		REG		0x00	: Performs a bitwise XOR on two registers
24 - LSHIFT REG VAL	0x17	REG		{   VALUE   }	: Performs a left shift on a register by VAL bits
25 - RSHIFT REG VAL	0x18	REG		{   VALUE   }	: Performs a right shift on a register by VAL bits

26 - INC REG		0x19	REG		0x00	0x00	: Increments a register
27 - DEC REG		0x20	REG		0x00	0x00	: Decrements a register

=== FLAGS ===

Less than
Equal to 	 
Greater than

=== MEMORY LAYOUT ===

64 Kib of memory

0x0000 -> 0xFDFE	: General-purpose
0xFDFF -> 0xFEFE	: Stack
0xFEFF -> 0xFFFF	: Display

=== ASSEMBLY ===
Use the $ prefix when talking about addresses in memory.
Use the ; prefix in comments !!MUST BE AT THE START OF THE LINE!!
Use the # prefix for a label
